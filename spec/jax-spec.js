// Generated by CoffeeScript 1.9.0
(function() {
  describe('Jax', function() {
    beforeEach(function() {
      return jasmine.Ajax.install();
    });
    afterEach(function() {
      return jasmine.Ajax.uninstall();
    });
    it('should send a GET request to the correct URL.', function() {
      var request;
      jax.get('/test/url').then(function() {
        return console.log('nothing');
      });
      request = jasmine.Ajax.requests.mostRecent();
      expect(request.url).toBe('/test/url');
      return expect(request.method).toBe('GET');
    });
    it('should retrieve data from the server properly.', function() {
      var done;
      done = jasmine.createSpy('success');
      jasmine.Ajax.stubRequest('/test/url').andReturn({
        'status': 200,
        'responseText': 'mock server response.'
      });
      jax.get('/test/url').success(function(data) {
        return done(data);
      });
      return expect(done).toHaveBeenCalledWith('mock server response.');
    });
    it('should handle errors correctly', function() {
      var fail, succeed;
      fail = jasmine.createSpy('fail');
      succeed = jasmine.createSpy('success');
      jasmine.Ajax.stubRequest('/test/url/2').andReturn({
        'status': 500,
        'responseText': 'error!'
      });
      jax.get('/test/url/2').then(function(data) {
        return succeed(data);
      });
      jax.get('/test/url/2').fail(function(data) {
        return fail(data);
      });
      expect(succeed).not.toHaveBeenCalledWith('error!');
      return expect(fail).toHaveBeenCalledWith('error!');
    });
    it('should be chainable', function() {
      var fail, succeed;
      fail = jasmine.createSpy('fail');
      succeed = jasmine.createSpy('success');
      jasmine.Ajax.stubRequest('/test/url').andReturn({
        'status': 200,
        'responseText': 'mock server response.'
      });
      jax.get('/test/url').success(function(data) {
        return succeed(data);
      }).fail(function(data) {
        return fail(data);
      });
      expect(succeed).toHaveBeenCalledWith('mock server response.');
      return expect(fail).not.toHaveBeenCalled();
    });
    it('should POST to the correct URL & with the right data', function() {
      var data, done, request;
      done = jasmine.createSpy('done');
      data = {
        name: 'lemon',
        type: 'fruit'
      };
      jax.post('/test/url/3', data).then(function(data) {
        return done(data);
      });
      request = jasmine.Ajax.requests.mostRecent();
      expect(request.url).toBe('/test/url/3');
      expect(request.method).toBe('POST');
      return expect(request.data()).toEqual({
        name: ['lemon'],
        type: ['fruit']
      });
    });
    it('should POST arrays with the indices as keys', function() {
      var data, done, request;
      done = jasmine.createSpy('done');
      data = ['lemon', 'fruit'];
      jax.post('/test/url/3', data).then(function(data) {
        return done(data);
      });
      request = jasmine.Ajax.requests.mostRecent();
      expect(request.url).toBe('/test/url/3');
      expect(request.method).toBe('POST');
      return expect(request.data()).toEqual({
        0: ['lemon'],
        1: ['fruit']
      });
    });
    it('should handle functions as parameters', function() {
      var data, done, request;
      done = jasmine.createSpy('done');
      data = function() {
        return {
          name: 'lemon',
          type: 'fruit'
        };
      };
      jax.post('/test/url/3', data).then(function(data) {
        return done(data);
      });
      request = jasmine.Ajax.requests.mostRecent();
      expect(request.url).toBe('/test/url/3');
      expect(request.method).toBe('POST');
      return expect(request.data()).toEqual({
        name: ['lemon'],
        type: ['fruit']
      });
    });
    return it('should handle functions inside objects', function() {
      var data, done, request;
      done = jasmine.createSpy('done');
      data = {
        name: 'lemon',
        type: function() {
          return 'fruit';
        }
      };
      jax.post('/test/url/3', data).then(function(data) {
        return done(data);
      });
      request = jasmine.Ajax.requests.mostRecent();
      expect(request.url).toBe('/test/url/3');
      expect(request.method).toBe('POST');
      return expect(request.data()).toEqual({
        name: ['lemon'],
        type: ['fruit']
      });
    });
  });

}).call(this);
